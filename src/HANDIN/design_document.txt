Design Documents
Name: Daniel Tran
ID: 1402478

------------------------------------------------------------------------------------------------------
How to run program: 

javac *.java
javah TEA

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD
 - Run on all terminals open

gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -shared -fpic -o libdecryption.so lib_decryption.c
gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -shared -fpic -o libencryption.so lib_encryption.c

java CreateAccounts shadow_file.txt
 - Allows user to create accounts and store them into the file called shadow_file.txt

java Server 16000
 - Creates a server at port 16000

java Client 16000 <hostname>
 - Creates a client that connects to port 16000 and hostname of the computer.
   - Note that creating Server will display the hostname
------------------------------------------------------------------------------------------------------

Design Details:

The CreateAccounts class will allow the user to specify a username and password, where the program
will store the username and password into the specified file, where the format is:
username	salt$hashedPassword
The hashing done on the password is done using SHA-256, and the salt is created using the SecureRandom
class. The username is unencrypted and the salt$hashedPassword is separated from the username with
a tab ('\t'). The salt and hashed password are stored in hex format, where the salt and hashed password
are separated by a $ sign.
The user will be prompted before each creation of an account to continue creating a user, or quitting
the program.

The Server class reads in the shadowfile and stores the username, salt, and password into separate lists.
Whenever a client wants to connect to the server, the server will spawn a thread to deal with the client.
The ServerThread can access the Server to view the stored data (username, salt, and passwords).

The Client class begins by connecting the the ServerThread. Afterwards, the client reads in inputs from
the console for the username and password, which is then encrypted and sent to the server. The
ServerThread will decrypt the messages, grab the corresponding credentials from the Server (if they
exist - If not, then an Access-Denied message is sent), hash the sent password with the salt corresponding
to the username, then compare with the stored hashed password. If the passwords match, then the server
sends an Access-Granted message, but if they do not, then an Access-Denied message is sent. The user
receives the message, where it will close its port if it is an Access-Denied message, or continue on to
ask the user for a filename if the message was Access-Granted. The user takes in a filename from the console,
encrypts the message, and sends it to the server. The server decrypts the filename and checks if there is a
file with that name. If there is not file, it sends a FILE NOT FOUND message to the user. If there is a file
with that name, then the server will encrypt the file and send it to the user. The user will receive and
decrypt the file, create their own folder (if it does not exist), then store the file into their folder. This
continues until the client enters exit into the terminal, in which the Server will receive a "finished" 
message and close any open streams and its socket. The client will also close its socket.

The Hashing class contains some functions to perform SHA-256 hashing on a salt and password, generate a salt,
and convert a hashed output into hex format to store into the shadow file. SHA-256 hashing algorithm was
used because I didn't want to depend on the encryption of TEA that required a key to encrypt the messages.
As well, the salt generated is 16 bytes long and is concatenated with the users password before hashing
is performed.

The KeyStorage class stores all of the necessary keys for a client or server (PublicKey, PrivateKey, the
shared secret key), where there are functions to retrieve said keys. This class was created to make the code
less cluttered and more neat. As well, there are encryption and decryption functions inside this class,
which call the TEA functions to encrypt and decrypt messages. Inside the c code (lib_encryption.c and 
lib_decryption.c), the encryption and decryption is run in a for loop, which will chain encrypt/decrypt
the message. This is done to ensure the entire message is encrypted.

The FileIO class is used to load the shadowfile, write to the shadowfile, save (download) a file that a client
receives, and provide functions to check if a file exists, or if a directory exists.

Note that in this program, the user is restricted to inputting a minimum of 2 characters at any point in the
system where the user is prompted for an input. As well, the sequencing diagrams may not show the exact
inputs to functions that may be seen in the code, because the complete input would require too much space on
the diagram. As well, if statement checks are denoted by the objects call to itself, where the message
displayed to its side shows the output of the if statement (or check).
Final note: Sometimes there is some displaying issues when input is entered. If you press anything on the
keyboard it will allow all of the text to display properly.

